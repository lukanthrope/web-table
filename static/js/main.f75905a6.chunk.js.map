{"version":3,"sources":["hooks/useActiveCell.tsx","actions/table.ts","actions/tableAction.types.ts","hooks/useCell.tsx","hooks/useCellStyle.tsx","utils/stringUtils.ts","utils/generateTable.ts","parser/index.ts","components/Header/FormulaInput.tsx","components/Header/Instrumens.tsx","components/Header/index.tsx","components/tables/Cell.tsx","components/tables/HeaderRow.tsx","components/tables/Table.tsx","App.tsx","serviceWorker.ts","reducers/index.ts","store/index.ts","index.tsx"],"names":["useActiveCell","activeCell","useSelector","state","get","useCell","activeCellValue","setActiveCellValue","setActiveCell","data","type","payload","cellId","cellValue","value","dispatch","useDispatch","e","cell","cellStyle","style","param","incrementCellName","name","nums","s","count","split","map","el","c","countLetters","lets","substring","num","Number","getInnerString","toParse","start","end","mid","Math","floor","length","i","j","toFindRight","output","rest","isAction","actions","action","num1","num2","excecute","trim","arr","todo","temp","push","includes","devideStrings","input","stack","bracket","bracketsIndex","indexOf","pop","isBalanced","console","log","result","tempStr","tempStr2","len","toString","isNaN","FormulaInput","table","onChange","target","data-testid","onKeyDown","key","newStr","toLowerCase","k","replace","RegExp","parcer","Instruments","useCellStyle","setStyle","useState","bgColors","setBgColors","className","background","color","onClick","fontWeight","prev","fontStyle","Header","props","children","Cell","thisRef","useRef","setCellValue","delayedKeyDown","debounce","incrementActiveCell","useEffect","current","focus","id","persist","preventDefault","ref","HeaderRow","names","Table","rows","setRows","cols","setCols","r","String","fromCharCode","initializeRow","initializeCol","App","Boolean","window","location","hostname","match","letterCode","letter","generateTable","initialState","IMap","store","createStore","update","set","newStyle","Object","assign","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f75905a6.chunk.js","sourcesContent":["import { useSelector } from 'react-redux';\r\nimport { State } from '../reducers';\r\nimport { useCell } from './';\r\n\r\nimport { ActiveCellHook, ActiveCellHookResult, SetCellValue } from './hook.types';\r\n\r\nconst useActiveCell: ActiveCellHook = ():ActiveCellHookResult => {\r\n  const getActiveCell = (state: State) => state.get('activeCell');\r\n  const activeCell = useSelector(getActiveCell);\r\n  const [activeCellValue, setActiveCellValue] = useCell(activeCell);\r\n\r\n  return {\r\n    activeCell,\r\n    setActiveCellValue: setActiveCellValue as SetCellValue,\r\n    activeCellValue: activeCellValue as string,\r\n  }\r\n}\r\n\r\nexport default useActiveCell;","import { \r\n  UPDATE_CELL, \r\n  SET_ACTIVE_CELL,\r\n  UPDATE_CELL_STYLE,\r\n  TableActionTypes, \r\n  CellPayload,\r\n  ActiveCellPayload,\r\n  CellStylePayload\r\n} from './tableAction.types';\r\n\r\nexport const updateCell = (data: CellPayload): TableActionTypes => ({\r\n  type: UPDATE_CELL,\r\n  payload: data,\r\n});\r\n\r\nexport const setActiveCell = (data: ActiveCellPayload): TableActionTypes => ({\r\n  type: SET_ACTIVE_CELL,\r\n  payload: data,\r\n});\r\n\r\nexport const setCellStyle = (style: CellStylePayload): TableActionTypes => ({\r\n  type: UPDATE_CELL_STYLE,\r\n  payload: style,\r\n});","export const UPDATE_CELL = 'UPDATE_CELL';\r\nexport const UPDATE_CELL_STYLE = 'UPDATE_CELL_STYLE';\r\nexport const SET_ACTIVE_CELL = 'SET_ACTIVE_CELL';\r\n\r\nexport interface CellPayload {\r\n  data: string;\r\n  cell: string;\r\n}\r\n\r\ninterface UpdateCellAction {\r\n  type: typeof UPDATE_CELL;\r\n  payload: CellPayload;\r\n};\r\n\r\nexport interface ActiveCellPayload {\r\n  activeCell: string; \r\n}\r\n\r\ninterface SetActiveCellAction {\r\n  type: typeof SET_ACTIVE_CELL;\r\n  payload: ActiveCellPayload;\r\n};\r\n\r\nexport interface CellStylePayload {\r\n  cell: string;\r\n  param: string;\r\n  value: string;\r\n}\r\n\r\ninterface UpdateCellStyleAction {\r\n  type: typeof UPDATE_CELL_STYLE;\r\n  payload: CellStylePayload;\r\n}\r\n\r\nexport type TableActionTypes = UpdateCellAction | SetActiveCellAction | UpdateCellStyleAction;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { State } from '../reducers';\r\nimport { updateCell } from '../actions/table';\r\n\r\nimport { CellHook, CellHookResult } from './hook.types';\r\n\r\nconst useCell:CellHook = (cellId: string): CellHookResult => {\r\n  const getTable = (state: State) => state.get('table')[cellId].value;\r\n  const cellValue = useSelector(getTable);\r\n  const dispatch = useDispatch();\r\n\r\n  const setCellValue = (e: string): void => {\r\n    dispatch(updateCell({\r\n      cell: cellId,\r\n      data: e,\r\n    }));\r\n  };\r\n\r\n  return [\r\n    cellValue,\r\n    setCellValue,\r\n  ]\r\n}\r\n\r\nexport default useCell;","import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { State } from '../reducers';\r\nimport { setCellStyle } from '../actions/table';\r\n\r\nimport { CellStyleHook, CellStyleHookResult } from './hook.types';\r\n\r\nconst useCell:CellStyleHook = (cellId: string): CellStyleHookResult => {\r\n  const getTable = (state: State) => state.get('table')[cellId].style;\r\n  const cellStyle = useSelector(getTable);\r\n  const dispatch = useDispatch();\r\n\r\n  const SetCellStyle = (param: string, value: string): void => {\r\n    dispatch(setCellStyle({\r\n      cell: cellId,\r\n      param,\r\n      value,\r\n    }));\r\n  };\r\n\r\n  return [\r\n    cellStyle,\r\n    SetCellStyle,\r\n  ]\r\n}\r\n\r\nexport default useCell;","import { ROWS } from './generateTable';\r\nimport { PartedString } from './stringUtils.types';\r\n\r\nexport function isDigit(c: string): boolean {\r\n  if (c >= '0' && c <= '9')\r\n    return true;\r\n\r\n  return false;\r\n}\r\n\r\nexport function countLetters(s: string): number {\r\n  let count: number = 0;\r\n\r\n  s.split('')\r\n    .map((el: string) => !isDigit(el) ? count++ : count);\r\n\r\n  return count;\r\n}\r\n\r\nexport function incrementCellName(name: string): string {\r\n  let nums: number = countLetters(name);\r\n  let lets:string = name.substring(0, nums);\r\n  let num: number = Number(name.substring(nums)) + 1;\r\n  if (num > ROWS) num = 1;\r\n  \r\n  return `${lets}${num}`;\r\n}\r\n\r\nexport function isBalanced (input: string): boolean {\r\n\r\n  let brackets = \"[]{}()<>\"\r\n  let stack = []\r\n\r\n  for(let bracket of input) {\r\n    let bracketsIndex = brackets.indexOf(bracket)\r\n\r\n    if (bracketsIndex === -1){\r\n      continue\r\n    }\r\n\r\n    if(bracketsIndex % 2 === 0) {\r\n      stack.push(bracketsIndex + 1)\r\n    } else {\r\n      if(stack.pop() !== bracketsIndex) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return stack.length === 0\r\n}\r\n\r\nexport function getInnerString(toParse: string): PartedString {\r\n  let start: number = -1;\r\n  let end: number = -1;\r\n\r\n  let mid: number = Math.floor(toParse.length / 2);\r\n  for (let i: number = mid, j: number = mid; i < toParse.length, j >= 0; i++, j--) {\r\n    if (toParse[i] === '(') {\r\n      start = i;\r\n      break;\r\n    }\r\n    if (toParse[j] === '(')  {\r\n      start = j;\r\n      break;\r\n    }\r\n  }\r\n  \r\n  let toFindRight: number = 0;\r\n  for (let i: number = start + 1; i < toParse.length; i++) {\r\n    if (toParse[i] === '(')\r\n      toFindRight++;\r\n    if (toParse[i] === ')') {\r\n      if (toFindRight !== 0) {\r\n        toFindRight--;\r\n      } else {\r\n        end = i;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  let output = toParse.substring(start + 1, end);\r\n  let rest = `${toParse.substring(0, start)}${toParse.substring(end + 1)}`\r\n\r\n  return {\r\n    output,\r\n    rest,\r\n  };\r\n}\r\n\r\nexport const containesBrackets = (s: string): boolean => s.includes('(') && s.includes(')');\r\n\r\nexport function devideStrings(toParse: string): string[] {\r\n  let todo: string[] = [];\r\n  let temp: PartedString = getInnerString(toParse); \r\n  let rest: string = temp.rest;\r\n  todo.push(temp.output);\r\n\r\n  while(containesBrackets(rest)) {\r\n    temp = getInnerString(rest);\r\n    rest = temp.rest;\r\n    todo.push(temp.output);\r\n  }\r\n\r\n  todo.push(rest);\r\n\r\n  return todo;\r\n}","export const COLS = 27;\r\nexport const ROWS = 100;\r\n\r\nexport function generateTable() {\r\n  const table: any = { };\r\n\r\n  let letterCode: number = 64;\r\n  let letter: string = '';\r\n\r\n  for (let i: number = 1; i < COLS; i++) {\r\n    letterCode++;\r\n    letter = String.fromCharCode(letterCode);\r\n    for (let j: number = 1; j <= ROWS; j++) {\r\n      table[`${letter}${j}`] = {\r\n        value: '',\r\n        style: {\r\n          background: '#ffffff',\r\n          fontStyle: 'normal',\r\n          fontWeight: 'normal',\r\n          color: '#000000',\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  return table;\r\n}","import { devideStrings, isBalanced } from '../utils/stringUtils';\r\n\r\nconst isAction = (s: string): boolean => s === '+' || s === '-' || s === '*' || s === '/';\r\n\r\nfunction actions(action: string, num1: number, num2: number): number {\r\n  switch(action) {\r\n    case '+':\r\n      return num1 + num2;\r\n    case '-':\r\n      return num1 - num2;\r\n    case '/':\r\n      return num1 / num2;\r\n    default:\r\n      return num1 * num2;\r\n  }\r\n}\r\n\r\nfunction excecute(toParse: string): string {\r\n  let s: string = toParse.trim();\r\n  let arr: string[] = devideStrings(s);\r\n\r\n  if (!isBalanced(s)) return 'Syntax error';\r\n  console.log(arr)\r\n  let result: number = 0;\r\n  let tempStr: string = '';\r\n  let tempStr2: string = '';\r\n  let action: string = '';\r\n\r\n  for(let j: number = 0; j < arr.length; j++ ) {\r\n    let toParse: string = arr[j];\r\n    let len = toParse.length - 1;\r\n    console.log(toParse[len])\r\n    if (isAction(toParse[len])) {\r\n      toParse = `${toParse[len]}${toParse.substring(0, len)}`;\r\n    }\r\n    tempStr = result.toString();\r\n    console.log(toParse)\r\n    for (let i: number = 0; i < toParse.length; i++) {\r\n      console.log(action)\r\n      if (i === toParse.length - 1) {\r\n        if (!isNaN(Number(tempStr2 + toParse[i])) && !isNaN(Number(tempStr)) && action !== '') {\r\n          result = actions(action, Number(tempStr), Number(tempStr2 + toParse[i]));\r\n          tempStr = result.toString();\r\n          tempStr2 = '';\r\n        }\r\n      } else if (!isNaN(Number(tempStr + toParse[i])) && action === '') {\r\n        tempStr += toParse[i];\r\n      } else if (!isNaN(Number(tempStr2 + toParse[i])) && action !== '') {\r\n        tempStr2 += toParse[i];\r\n      } else if (isAction(toParse[i])) {\r\n        if (!isNaN(Number(tempStr2)) && !isNaN(Number(tempStr)) && action !== '') {\r\n          result = actions(action, Number(tempStr), Number(tempStr2));\r\n          tempStr = result.toString();\r\n          tempStr2 = '';\r\n        }\r\n        action = toParse[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  return result.toString();\r\n}\r\n\r\nexport default excecute;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { State } from '../../reducers';\r\nimport { useActiveCell } from '../../hooks';\r\nimport parcer from '../../parser';\r\n\r\nfunction FormulaInput() {\r\n  const { setActiveCellValue, activeCellValue } = useActiveCell();\r\n  const getAllCells = (state: State) => state.get('table');\r\n  const table = useSelector(getAllCells);\r\n\r\n  const calculate = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      let newStr = activeCellValue.toLowerCase();\r\n      for (let key in table) {\r\n        let k = key.toLowerCase();\r\n\r\n        if (newStr.includes(k)) \r\n          newStr = newStr.replace(new RegExp(k, \"g\"), table[key].value);\r\n      }\r\n      setActiveCellValue(parcer(newStr));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <span>fx</span>\r\n      <input \r\n        value={activeCellValue} \r\n        onChange={e => setActiveCellValue(e.target.value)} \r\n        data-testid=\"header-input\"\r\n        onKeyDown={calculate}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormulaInput;","import React, { useState } from 'react';\r\nimport { useActiveCell, useCellStyle } from '../../hooks';\r\n\r\nfunction Instruments() {\r\n  const { activeCell } = useActiveCell();\r\n  const [style, setStyle] = useCellStyle(activeCell);\r\n\r\n  const [bgColors, setBgColors] = useState<string[]>(['', '']);\r\n\r\n  const handleBackground = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setStyle('background', e.target.value);\r\n  };\r\n\r\n  const handleColor = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setStyle('color', e.target.value);\r\n  };\r\n\r\n  const handleFontStyle = (): void => {\r\n    if (style.fontStyle === 'italic') {\r\n      setStyle('fontStyle', 'normal');\r\n      setBgColors(prev => {\r\n        prev[1] = '';\r\n        return prev;\r\n      });\r\n    } else {\r\n      setStyle('fontStyle', 'italic');\r\n      setBgColors(prev => {\r\n        prev[1] = 'graybg';\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleFontWeight = (): void => {\r\n    if (style.fontWeight === 'bold') {\r\n      setStyle('fontWeight', 'normal');\r\n      setBgColors(prev => {\r\n        prev[0] = '';\r\n        return prev;\r\n      });\r\n    } else {\r\n      setStyle('fontWeight', 'bold');\r\n      setBgColors(prev => {\r\n        prev[0] = 'graybg';\r\n        return prev;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tool-bar\"> \r\n      <div>\r\n        <label>background</label>\r\n        <input \r\n          type=\"color\"\r\n          value={style.background}\r\n          onChange={handleBackground}\r\n          />\r\n      </div>\r\n\r\n      <div>\r\n        <label>font</label>\r\n        <input \r\n          type=\"color\"\r\n          value={style.color}\r\n          onChange={handleColor}\r\n          />\r\n      </div>\r\n\r\n      <section>\r\n        <span \r\n          className={`material-icons pointer graybg-hover ${bgColors[0]}`}\r\n          onClick={handleFontWeight}\r\n          >\r\n          format_bold\r\n        </span>\r\n        <span \r\n          className={`material-icons pointer graybg-hover ${bgColors[1]}`} \r\n          onClick={handleFontStyle}\r\n          >\r\n          format_italic\r\n        </span>\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Instruments;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Header: React.FC = (props) => \r\n  <header>\r\n    { props?.children }\r\n  </header>\r\n\r\nexport default Header;","import React, { \r\n  useRef, \r\n  useEffect,\r\n} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { debounce } from 'lodash';\r\n \r\nimport { setActiveCell } from '../../actions/table';\r\nimport { incrementCellName } from '../../utils/stringUtils';\r\nimport { useActiveCell, useCell, useCellStyle } from '../../hooks';\r\n\r\ninterface CellProps {\r\n  key: string;\r\n  cellId: string;\r\n}\r\n\r\nfunction Cell({ cellId }: CellProps) {\r\n  const dispatch = useDispatch();\r\n  const thisRef = useRef<HTMLInputElement | null>(null);\r\n  const { activeCell } = useActiveCell();\r\n  const [cellValue, setCellValue] = useCell(cellId);\r\n  const [cellStyle] = useCellStyle(cellId);\r\n  const { background, color, fontWeight, fontStyle } = cellStyle;\r\n\r\n  const keyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    e.key === 'Enter' && incrementActiveCell();\r\n    e.key === 'Tab' && incrementActiveCell();\r\n  }\r\n  const delayedKeyDown = debounce(keyDown, 500);\r\n\r\n  useEffect(() => {\r\n    if (activeCell === cellId) \r\n      thisRef.current?.focus();\r\n  }, [activeCell, cellId]);\r\n\r\n  const handleActiveCell = (): void => {\r\n    dispatch(setActiveCell({\r\n      activeCell: cellId,\r\n    }));\r\n  };\r\n\r\n  const incrementActiveCell = (): void => {\r\n    dispatch(setActiveCell({\r\n      activeCell: incrementCellName(activeCell),\r\n    }));\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (e.key === 'Tab' || e.key === 'Enter') {\r\n      e.persist();\r\n      e.preventDefault();\r\n\r\n      delayedKeyDown(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <td id={activeCell === cellId ? 'active-cell' : ''} >\r\n      <input \r\n        value={cellValue} \r\n        onChange={e => setCellValue(e.target.value)}\r\n        onClick={handleActiveCell}\r\n        onKeyDown={handleKeyPress}\r\n        ref={thisRef}\r\n        data-testid={cellId}\r\n        style={{\r\n          'background': background,\r\n          'color': color,\r\n          'fontStyle': fontStyle,\r\n          'fontWeight': fontWeight,\r\n        }}\r\n        />\r\n    </td>\r\n  )\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\n\r\ninterface CellProps {\r\n  names: string[];\r\n}\r\n\r\nfunction HeaderRow({ names }: CellProps) {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th></th>\r\n        { names.map((el: string) => <th key={el} className=\"t-header\">{ el }</th> )}\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\nexport default HeaderRow;","import React, { useState, useEffect } from 'react';\r\nimport Cell from './Cell';\r\nimport HeaderRow from './HeaderRow';\r\nimport './tables.css';\r\n\r\nfunction Table() {\r\n  const [rows, setRows] = useState<string[]>([]);\r\n  const [cols, setCols] = useState<number[]>([]);\r\n\r\n\r\n  const initializeRow = (): void => {\r\n    const r: string[] = [];\r\n    for (let i: number = 65; i <= 90; i++) {\r\n      r.push(String.fromCharCode(i));\r\n    }\r\n    setRows(r);\r\n  };\r\n\r\n  const initializeCol = (): void => {\r\n    const temp: number[] = [];\r\n    for (let i: number = 1; i <= 100; i++)\r\n      temp.push(i);\r\n\r\n    setCols(temp);\r\n  };\r\n\r\n  useEffect(() => {\r\n    initializeRow();\r\n    initializeCol();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"table-container\">\r\n      <table className=\"table\">\r\n        <HeaderRow names={rows} />\r\n        <tbody>\r\n          {cols.map((el: number) => (\r\n            <tr key={el}>\r\n              <th className=\"row-header\">{el}</th>\r\n              {rows.map((s: string) => (\r\n                <Cell key={`${s}${el}`} cellId={`${s}${el}`} />\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport FormulaInput from './components/Header/FormulaInput';\r\nimport Instruments from './components/Header/Instrumens';\r\nimport Header from './components/Header';\r\nimport Table from './components/tables/Table';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header>\r\n        <Instruments />\r\n        <FormulaInput />\r\n      </Header>\r\n      <Table />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { Map as IMap } from 'immutable';\r\nimport { generateTable } from '../utils/generateTable';\r\nimport { \r\n  UPDATE_CELL, \r\n  SET_ACTIVE_CELL,\r\n  UPDATE_CELL_STYLE, \r\n  TableActionTypes,\r\n } from '../actions/tableAction.types';\r\n\r\nconst table = generateTable();\r\n\r\nconst initialState = IMap({\r\n  table,\r\n  activeCell: \"A1\",\r\n});\r\n\r\nexport type State = typeof initialState; \r\n\r\nexport default function(state = initialState, action: TableActionTypes) {\r\n  switch(action.type) {\r\n    case UPDATE_CELL:\r\n      return state.update('table', prev => {\r\n        prev[action.payload.cell].value = action.payload.data;\r\n        return prev;\r\n      });\r\n    case SET_ACTIVE_CELL:\r\n      return state.set('activeCell', action.payload.activeCell);\r\n    case UPDATE_CELL_STYLE: \r\n      return state.update('table', prev => {\r\n        const newStyle = prev[action.payload.cell].style;\r\n        newStyle[action.payload.param] = action.payload.value;\r\n        prev[action.payload.cell].style = Object.assign({}, newStyle);\r\n        return prev;\r\n      })\r\n    default:\r\n      return state;\r\n}\r\n};","import { createStore } from 'redux';\r\nimport reducer from '../reducers';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store} >\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}